/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LiquidityExamples,
  LiquidityExamplesInterface,
} from "../../../contracts/LiquidityExample.sol/LiquidityExamples";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract INonfungiblePositionManager",
        name: "_nonfungiblePositionManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mintNewPosition",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nonfungiblePositionManager",
    outputs: [
      {
        internalType: "contract INonfungiblePositionManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "poolFee",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610d45380380610d4583398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c610c986100ad6000398061016752806101a6528061025a528061031f528061038b528061043852806104795250610c986000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806389a302711161005b57806389a30271146100d8578063b02c43d0146100ed578063b44a272214610110578063e0bab4c4146101185761007d565b8063089fe6aa14610082578063150b7a02146100a0578063306d9c61146100c0575b600080fd5b61008a610120565b6040516100979190610c0d565b60405180910390f35b6100b36100ae366004610919565b610126565b6040516100979190610b4a565b6100c8610144565b6040516100979493929190610c26565b6100e06103de565b6040516100979190610b02565b6101006100fb3660046109b3565b6103f6565b6040516100979493929190610b16565b6100e0610436565b6100e061045a565b610bb881565b60006101328685610472565b50630a85bd0160e11b95945050505050565b60008080806103e88061018c736b175474e89094c44da98b954eedeac495271d0f7f000000000000000000000000000000000000000000000000000000000000000083610638565b6101cb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb487f000000000000000000000000000000000000000000000000000000000000000083610638565b604080516101608101825273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488152736b175474e89094c44da98b954eedeac495271d0f6020820152610bb881830152620d89e7196060820152620d89e8608082015260a0810184905260c08101839052600a60e0820181905261010082015230610120820152426101408201529051634418b22b60e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638831645690610297908490600401610b5f565b608060405180830381600087803b1580156102b157600080fd5b505af11580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e991906109cb565b929950909750955093506102fd3388610472565b8285101561036957610345736b175474e89094c44da98b954eedeac495271d0f7f00000000000000000000000000000000000000000000000000000000000000006000610638565b848303610367736b175474e89094c44da98b954eedeac495271d0f3383610786565b505b818410156103d5576103b173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb487f00000000000000000000000000000000000000000000000000000000000000006000610638565b8382036103d373a0b86991c6218b36c1d19d4a2e9eb0ce3606eb483383610786565b505b50505090919293565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b60006020819052908152604090208054600182015460028301546003909301546001600160a01b03928316936001600160801b0390921692918216911684565b7f000000000000000000000000000000000000000000000000000000000000000081565b736b175474e89094c44da98b954eedeac495271d0f81565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399fbab88856040518263ffffffff1660e01b81526004016104c39190610c1d565b6101806040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190610a06565b5050505097505050509450945050506040518060800160405280866001600160a01b03168152602001826001600160801b03168152602001846001600160a01b03168152602001836001600160a01b031681525060008086815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b602083106106b45780518252601f199092019160209182019101610695565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610716576040519150601f19603f3d011682016040523d82523d6000602084013e61071b565b606091505b5091509150818015610749575080511580610749575080806020019051602081101561074657600080fd5b50515b61077f576040805162461bcd60e51b8152602060048201526002602482015261534160f01b604482015290519081900360640190fd5b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b602083106108025780518252601f1990920191602091820191016107e3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610864576040519150601f19603f3d011682016040523d82523d6000602084013e610869565b606091505b5091509150818015610897575080511580610897575080806020019051602081101561089457600080fd5b50515b61077f576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b80516108d881610c4a565b919050565b8051600281900b81146108d857600080fd5b80516001600160801b03811681146108d857600080fd5b805162ffffff811681146108d857600080fd5b600080600080600060808688031215610930578081fd5b853561093b81610c4a565b9450602086013561094b81610c4a565b935060408601359250606086013567ffffffffffffffff8082111561096e578283fd5b818801915088601f830112610981578283fd5b81358181111561098f578384fd5b8960208285010111156109a0578384fd5b9699959850939650602001949392505050565b6000602082840312156109c4578081fd5b5035919050565b600080600080608085870312156109e0578384fd5b845193506109f0602086016108ef565b6040860151606090960151949790965092505050565b6000806000806000806000806000806000806101808d8f031215610a28578687fd5b8c516bffffffffffffffffffffffff81168114610a43578788fd5b9b50610a5160208e016108cd565b9a50610a5f60408e016108cd565b9950610a6d60608e016108cd565b9850610a7b60808e01610906565b9750610a8960a08e016108dd565b9650610a9760c08e016108dd565b9550610aa560e08e016108ef565b94506101008d015193506101208d01519250610ac46101408e016108ef565b9150610ad36101608e016108ef565b90509295989b509295989b509295989b565b6001600160a01b03169052565b60020b9052565b62ffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681526001600160801b039390931660208401529083166040830152909116606082015260800190565b6001600160e01b031991909116815260200190565b600061016082019050610b73828451610ae5565b6020830151610b856020840182610ae5565b506040830151610b986040840182610af9565b506060830151610bab6060840182610af2565b506080830151610bbe6080840182610af2565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151610bfc82850182610ae5565b505061014092830151919092015290565b62ffffff91909116815260200190565b90815260200190565b9384526001600160801b039290921660208401526040830152606082015260800190565b6001600160a01b0381168114610c5f57600080fd5b5056fea2646970667358221220b9240d52d680144114881940b3eba9945a1b5760fc25703510c919ca0a6ce3cc64736f6c63430007060033";

type LiquidityExamplesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityExamplesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityExamples__factory extends ContractFactory {
  constructor(...args: LiquidityExamplesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _nonfungiblePositionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidityExamples> {
    return super.deploy(
      _nonfungiblePositionManager,
      overrides || {}
    ) as Promise<LiquidityExamples>;
  }
  override getDeployTransaction(
    _nonfungiblePositionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _nonfungiblePositionManager,
      overrides || {}
    );
  }
  override attach(address: string): LiquidityExamples {
    return super.attach(address) as LiquidityExamples;
  }
  override connect(signer: Signer): LiquidityExamples__factory {
    return super.connect(signer) as LiquidityExamples__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityExamplesInterface {
    return new utils.Interface(_abi) as LiquidityExamplesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityExamples {
    return new Contract(address, _abi, signerOrProvider) as LiquidityExamples;
  }
}
